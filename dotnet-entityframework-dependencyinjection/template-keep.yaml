AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless
Parameters:
  SubnetIds:
    Type: CommaDelimitedList
    Default: "subnet-07e349b6daeec440d,subnet-0ed4cae44c8056fd5"
  SecurityGroupIds:
    Type: CommaDelimitedList
    Default: "sg-0627be490f2e45a15"
  EnvironmentName:
    Type: String
  ProjectNameDashed:
    Type: String
  StageName:
    Type: String
    Default: latest
Resources:
  SqsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${EnvironmentName}_${ProjectNameDashed}-orchestrator
      Handler: MlgDataGenerationService.Orchestrator.Handler::MlgDataGenerationService.Orchestrator.Handler.SqsEventHandler::HandleAsync
      Runtime: dotnetcore2.1
      CodeUri: MlgDataGenerationService.Orchestrator.Handler/bin/build-output/
      Environment: 
        Variables:
          COMPlus_TieredCompilation: 1
          PROJECT_NAME: !Sub ${ProjectNameDashed}
          ENVIRONMENT_NAME: !Sub ${EnvironmentName}
      MemorySize: 3008
      Timeout: 180
      Role: !GetAtt SqsFunctionRole.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 1
      AutoPublishAlias: !Ref StageName
      Tracing: Active
      VpcConfig:
        SubnetIds: !Ref SubnetIds
        SecurityGroupIds: !Ref SecurityGroupIds
  SqsFunctionWarmer:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(5 minutes)'
      Targets:
        - Arn: !Ref SqsFunction.Alias
          Id: sqs-function-warmer
  SqsFunctionWarmerPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref SqsFunction.Alias
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SqsFunctionWarmer.Arn
  SqsFunctionRole:
    Type: AWS::IAM::Role
    Properties: 
      RoleName: !Sub ${EnvironmentName}-${ProjectNameDashed}-sqs-lambda
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Description: !Sub SQS Lambda Role for ${EnvironmentName}-${ProjectNameDashed}
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/AWSXrayFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
  Queue:
    Type: AWS::SQS::Queue
    Properties: 
      QueueName: !Sub ${EnvironmentName}_${ProjectNameDashed}-orchestrator-queue
      VisibilityTimeout: 1200
